{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @classdesc A Media represents a metadata information for the media upload\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\n * @property {Date} dateCreated - When the Media was created\n * @property {Date} dateUpdated - When the Media was updated\n * @property {Number} size - Size of media, bytes\n * @property {String} contentType - content type of media\n * @property {String} fileName - file name, if present, null otherwise\n */\n\nclass Media {\n  constructor(config, network, data) {\n    this.config = config;\n    this.network = network;\n\n    this._update(data);\n  }\n\n  get sid() {\n    return this.state.sid;\n  }\n\n  get serviceSid() {\n    return this.state.serviceSid;\n  }\n\n  get dateCreated() {\n    return this.state.dateCreated;\n  }\n\n  get dateUpdated() {\n    return this.state.dateUpdated;\n  }\n\n  get contentType() {\n    return this.state.contentType;\n  }\n\n  get size() {\n    return this.state.size;\n  }\n\n  get fileName() {\n    return this.state.filename;\n  }\n  /**\n   * Returns direct content URL to uploaded binary\n   * @public\n   * @returns {Promise<string>}\n   */\n\n\n  getContentUrl() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.network.get(\"\".concat(this.config.baseUrl, \"/\").concat(this.sid));\n\n      this._update(response.body);\n\n      return Promise.resolve(this.state.contentDirectUrl);\n    });\n  }\n\n  _update(data) {\n    this.state = {\n      sid: data.sid,\n      serviceSid: data.service_sid,\n      channelSid: data.channel_sid,\n      messageSid: data.message_sid,\n      dateCreated: data.date_created ? new Date(data.date_created) : null,\n      dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n      size: data.size,\n      contentType: data.content_type,\n      url: data.url,\n      contentUrl: data.links.content,\n      contentDirectUrl: data.links.content_direct_temporary,\n      filename: data.filename ? data.filename : null\n    };\n  }\n\n}\n\nexports.Media = Media;","map":null,"metadata":{},"sourceType":"script"}