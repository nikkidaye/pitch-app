{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst transporterror_1 = require(\"./transporterror\");\n\nconst XHR = global['XMLHttpRequest'] || require('xmlhttprequest').XMLHttpRequest;\n\nfunction parseResponseHeaders(headerString) {\n  if (!headerString) {\n    return {};\n  }\n\n  return headerString.split('\\u000d\\u000a').map(el => el.split('\\u003a\\u0020')).filter(el => el.length === 2 && el[1].length > 0).reduce((prev, curr) => {\n    prev[curr[0]] = curr[1];\n    return prev;\n  }, {});\n}\n\nfunction extractBody(xhr) {\n  const contentType = xhr.getResponseHeader('Content-Type');\n\n  if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {\n    return xhr.responseText;\n  }\n\n  try {\n    return JSON.parse(xhr.responseText);\n  } catch (e) {\n    return xhr.responseText;\n  }\n}\n\nfunction adaptHttpResponse(response) {\n  try {\n    response.body = JSON.parse(response.body);\n  } catch (e) {} // eslint-disable-line no-empty\n\n\n  return response;\n}\n/**\n * Provides generic network interface\n */\n\n\nclass Transport {\n  constructor() {}\n\n  static request(method, url, headers, body) {\n    return new Promise((resolve, reject) => {\n      let xhr = new XHR();\n      xhr.open(method, url, true);\n\n      xhr.onreadystatechange = function onreadystatechange() {\n        if (xhr.readyState !== 4) {\n          return;\n        }\n\n        const headers = parseResponseHeaders(xhr.getAllResponseHeaders());\n        const body = extractBody(xhr);\n\n        if (200 <= xhr.status && xhr.status < 300) {\n          resolve({\n            status: xhr.status,\n            headers,\n            body\n          });\n        } else {\n          const status = xhr.statusText && xhr.statusText.code ? xhr.statusText.code : 'NONE';\n          let bodyRepresentation;\n\n          if (typeof body === 'string') {\n            bodyRepresentation = body && body.split('\\n', 2).length === 1 ? body : '';\n          } else {\n            bodyRepresentation = JSON.stringify(body);\n          }\n\n          const message = \"\".concat(xhr.status, \": [\").concat(status, \"] \").concat(bodyRepresentation);\n          reject(new transporterror_1.TransportError(message, xhr.status, body, status, headers));\n        }\n      };\n\n      for (let headerName in headers) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n\n        if (headerName === 'Content-Type' && headers[headerName] === 'application/json') {\n          body = JSON.stringify(body);\n        }\n      }\n\n      xhr.send(body);\n    });\n  }\n  /**\n   * Make a GET request by given URL\n   */\n\n\n  get(url, headers) {\n    return Transport.request('GET', url, headers);\n  }\n  /**\n   * Make a POST request by given URL\n   */\n\n\n  post(url, headers, body) {\n    return Transport.request('POST', url, headers, body);\n  }\n  /**\n   * Make a PUT request by given URL\n   */\n\n\n  put(url, headers, body) {\n    return Transport.request('PUT', url, headers, body);\n  }\n  /**\n   * Make a DELETE request by given URL\n   */\n\n\n  delete(url, headers) {\n    return Transport.request('PUT', url, headers);\n  }\n\n}\n\nexports.Transport = Transport;","map":null,"metadata":{},"sourceType":"script"}