{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst logger_1 = require(\"./logger\");\n\nclass WebSocketChannel extends events_1.EventEmitter {\n  constructor(url) {\n    super();\n    this.url = url;\n    this.WebSocket = global['WebSocket'] || global['MozWebSocket'] || require('ws');\n  }\n\n  get isConnected() {\n    return this.socket && this.socket.readyState === 1;\n  }\n\n  connect() {\n    logger_1.log.trace('connecting to socket');\n    let socket = new this.WebSocket(this.url);\n    socket.binaryType = 'arraybuffer';\n\n    socket.onopen = () => {\n      logger_1.log.debug(\"socket opened \".concat(this.url));\n      this.emit('connected');\n    };\n\n    socket.onclose = e => {\n      logger_1.log.debug('socket closed', e);\n      this.emit('disconnected', e);\n    };\n\n    socket.onerror = e => {\n      logger_1.log.debug('error:', e);\n      this.emit('socketError', e);\n    };\n\n    socket.onmessage = message => {\n      this.emit('message', message.data);\n    };\n\n    this.socket = socket;\n  }\n\n  send(message) {\n    this.socket.send(message);\n  }\n\n  close() {\n    logger_1.log.trace('closing socket');\n\n    if (this.socket) {\n      this.socket.onopen = null;\n      this.socket.onclose = null;\n      this.socket.onerror = null;\n      this.socket.onmessage = null;\n\n      try {\n        this.socket.close();\n      } finally {}\n    }\n  }\n\n}\n\nexports.WebSocketChannel = WebSocketChannel;","map":null,"metadata":{},"sourceType":"script"}