{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logger_1 = require(\"./utils/logger\");\n\nconst SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';\nconst SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';\nconst SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';\nconst SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';\n/**\n * @class Router\n * @classdesc Routes all incoming messages to the consumers\n */\n\nclass Router {\n  constructor(params) {\n    this.config = params.config;\n    this.subscriptions = params.subscriptions;\n    this.notifications = params.notifications;\n    this.notifications.subscribe(SYNC_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_DOCUMENT_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_LIST_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_MAP_NOTIFICATION_TYPE);\n    this.notifications.on('message', (messageType, payload) => this.onMessage(messageType, payload));\n    this.notifications.on('transportReady', isConnected => this.onConnectionStateChanged(isConnected));\n  }\n  /**\n   * Entry point for all incoming messages\n   * @param {String} type - Type of incoming message\n   * @param {Object} message - Message to route\n   */\n\n\n  onMessage(type, message) {\n    logger_1.default.trace('Notification type:', type, 'content:', message);\n\n    switch (type) {\n      case SYNC_DOCUMENT_NOTIFICATION_TYPE:\n      case SYNC_LIST_NOTIFICATION_TYPE:\n      case SYNC_MAP_NOTIFICATION_TYPE:\n        this.subscriptions.acceptMessage(message, false);\n        break;\n\n      case SYNC_NOTIFICATION_TYPE:\n        this.subscriptions.acceptMessage(message, true);\n        break;\n    }\n  }\n  /**\n   * Subscribe for events\n   */\n\n\n  subscribe(sid, entity) {\n    this.subscriptions.add(sid, entity);\n  }\n  /**\n   * Unsubscribe from events\n   */\n\n\n  unsubscribe(sid) {\n    this.subscriptions.remove(sid);\n  }\n  /**\n   * Handle transport establishing event\n   * If we have any subscriptions - we should check object for modifications\n   */\n\n\n  onConnectionStateChanged(isConnected) {\n    this.subscriptions.onConnectionStateChanged(isConnected);\n  }\n\n}\n\nexports.Router = Router;\nexports.default = Router;","map":null,"metadata":{},"sourceType":"script"}