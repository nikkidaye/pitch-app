{"ast":null,"code":"\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = _promise2.default))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @classdesc A Media represents a media information for Message in a Channel.\n * @property {String} contentType - content type of media\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {Number} size - Size of media, bytes\n * @property {String} [filename] - file name if present, null otherwise\n */\n\nvar Media = function () {\n  function Media(data, services) {\n    (0, _classCallCheck3.default)(this, Media);\n    this.mcsMedia = null;\n    this.services = services;\n    this.state = {\n      sid: data.sid,\n      filename: data.filename,\n      contentType: data.contentType,\n      size: data.size\n    };\n  }\n\n  (0, _createClass3.default)(Media, [{\n    key: \"getContentUrl\",\n\n    /**\n     * Returns direct content URL for the media.\n     * @returns {Promise<String>}\n     */\n    value: function getContentUrl() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regenerator2.default.mark(function _callee() {\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.mcsMedia) {\n                  _context.next = 8;\n                  break;\n                }\n\n                if (!this.services.mcsClient) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.services.mcsClient.get(this.state.sid);\n\n              case 4:\n                this.mcsMedia = _context.sent;\n                _context.next = 8;\n                break;\n\n              case 7:\n                throw new Error('Media Content Service is unavailable');\n\n              case 8:\n                return _context.abrupt(\"return\", this.mcsMedia.getContentUrl());\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.state.sid;\n    }\n  }, {\n    key: \"filename\",\n    get: function get() {\n      return this.state.filename;\n    }\n  }, {\n    key: \"contentType\",\n    get: function get() {\n      return this.state.contentType;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.state.size;\n    }\n  }]);\n  return Media;\n}();\n\nexports.Media = Media;","map":null,"metadata":{},"sourceType":"script"}