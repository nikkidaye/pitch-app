{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst logger_1 = require(\"./logger\");\n\nconst configuration_1 = require(\"./configuration\");\n\nconst media_1 = require(\"./media\");\n\nexports.Media = media_1.Media;\nexports.McsMedia = media_1.Media;\n\nconst twilio_transport_1 = require(\"twilio-transport\");\n\nconst network_1 = require(\"./services/network\");\n\nconst log = logger_1.Logger.scope(''); //log.setLevel('trace');\n\nconst SDK_VERSION = require('./../package.json').version;\n\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\n\nclass Client {\n  /**\n   * @param {String} token - Access token\n   * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   */\n  constructor(token, baseUrl, options = {}) {\n    this.options = options;\n    this.options.logLevel = this.options.logLevel || 'silent';\n    this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    log.setLevel(this.options.logLevel);\n    this.options.transport = this.options.transport || new twilio_transport_1.Transport();\n    this.transport = this.options.transport;\n    this.network = new network_1.Network(this.config, this.transport);\n  }\n  /**\n   * These options can be passed to Client constructor\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * Update the token used for Client operations\n   * @param {String} token - The JWT string of the new token\n   * @public\n   * @returns {void}\n   */\n\n\n  updateToken(token) {\n    log.info('updateToken');\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    this.config.updateToken(token);\n  }\n  /**\n   * Gets media from media service\n   * @param {String} sid - Media's SID\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  get(sid) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.network.get(\"\".concat(this.config.baseUrl, \"/\").concat(sid));\n      return new media_1.Media(this.config, this.network, response.body);\n    });\n  }\n  /**\n   * Posts raw content to media service\n   * @param {String} contentType - content type of media\n   * @param {String|Buffer} media - content to post\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  post(contentType, media) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.network.post(this.config.baseUrl, media, contentType);\n      return new media_1.Media(this.config, this.network, response.body);\n    });\n  }\n  /**\n   * Posts FormData to media service. Can be used only with browser engine's FormData.\n   * In non-browser FormData case the method will do promise reject with\n   * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n   * @param {FormData} formData - form data to post\n   * @public\n   * @returns {Promise<Media>}\n   */\n\n\n  postFormData(formData) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let response = yield this.network.post(this.config.baseUrl, formData);\n      return new media_1.Media(this.config, this.network, response.body);\n    });\n  }\n\n}\n\nClient.version = SDK_VERSION;\nexports.Client = Client;\nexports.McsClient = Client;\nexports.default = Client;","map":null,"metadata":{},"sourceType":"script"}