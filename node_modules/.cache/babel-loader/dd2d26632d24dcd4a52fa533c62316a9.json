{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tree_1 = require(\"./utils/tree\");\n\nclass Entry {\n  constructor(value, revision) {\n    this.value = value;\n    this.revision = revision || 0;\n  }\n\n  get isValid() {\n    return true;\n  }\n\n}\n\nclass Tombstone {\n  constructor(revision) {\n    this.revision = revision;\n  }\n\n  get isValid() {\n    return false;\n  }\n\n}\n\nclass Cache {\n  constructor() {\n    this.items = new tree_1.TreeMap();\n  }\n\n  store(key, value, revision) {\n    let entry = this.items.get(key);\n\n    if (entry && entry.revision > revision) {\n      if (entry.isValid) {\n        return entry.value;\n      }\n\n      return null;\n    }\n\n    this.items.set(key, new Entry(value, revision));\n    return value;\n  }\n\n  delete(key, revision) {\n    let curr = this.items.get(key);\n\n    if (!curr || curr.revision < revision) {\n      this.items.set(key, new Tombstone(revision));\n    }\n  }\n\n  isKnown(key, revision) {\n    let curr = this.items.get(key);\n    return curr && curr.revision >= revision;\n  }\n\n  get(key) {\n    let entry = this.items.get(key);\n\n    if (entry && entry.isValid) {\n      return entry.value;\n    }\n\n    return null;\n  }\n\n  has(key) {\n    let entry = this.items.get(key);\n    return entry && entry.isValid;\n  }\n\n}\n\nexports.Cache = Cache;\nexports.default = Cache;","map":null,"metadata":{},"sourceType":"script"}