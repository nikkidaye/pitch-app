{"ast":null,"code":"import _objectSpread from \"/home/techhire/Desktop/apps/pitch-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/techhire/Desktop/apps/pitch-app/src/components/Chat/Chat.js\";\nimport React, { Component } from \"react\";\nimport MessageForm from \"./MessageForm\";\nimport MessageList from \"./MessageList\";\nimport TwilioChat from \"twilio-chat\";\nimport $ from \"jquery\";\nimport \"./Chat.css\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNewMessage = text => {\n      if (this.state.channel) {\n        this.state.channel.sendMessage(text);\n      }\n    };\n\n    this.getToken = () => {\n      return new Promise((resolve, reject) => {\n        this.setState({\n          messages: [...this.state.messages, {\n            body: \"Connecting...\"\n          }]\n        });\n        $.getJSON(\"/token\", token => {\n          this.setState({\n            username: token.identity\n          });\n          resolve(token);\n        }).fail(() => {\n          reject(Error(\"Failed to connect.\"));\n        });\n      });\n    };\n\n    this.addMessage = message => {\n      const messageData = _objectSpread({}, message, {\n        me: message.author === this.state.username\n      });\n\n      this.setState({\n        messages: [...this.state.messages, messageData]\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.getToken().then(this.createChatClient).then(this.joinGeneralChannel).then(this.configureChannelEvents).catch(error => {\n        this.setState({\n          messages: this.addMessage({\n            body: \"...\"\n          })\n        });\n      });\n    };\n\n    this.createChatClient = token => {\n      return new Promise((resolve, reject) => {\n        resolve(new TwilioChat(token.jwt));\n      });\n    };\n\n    this.joinGeneralChannel = chatClient => {\n      return new Promise((resolve, reject) => {\n        chatClient.getSubscribedChannels().then(() => {\n          chatClient.getChannelByUniqueName(\"general\").then(channel => {\n            this.addMessage({\n              body: \"Joining general channel...\"\n            });\n            this.setState({\n              channel\n            });\n            channel.join().then(() => {\n              this.addMessage({\n                body: \"Joined general channel as \".concat(this.state.username)\n              });\n              window.addEventListener(\"beforeunload\", () => channel.leave());\n            }).catch(() => reject(Error(\"Could not join general channel.\")));\n            resolve(channel);\n          }).catch(() => this.createGeneralChannel(chatClient));\n        }).catch(() => reject(Error(\"Could not get channel list.\")));\n      });\n    };\n\n    this.createGeneralChannel = chatClient => {\n      return new Promise((resolve, reject) => {\n        this.addMessage({\n          body: \"Creating general channel...\"\n        });\n        chatClient.createChannel({\n          uniqueName: \"general\",\n          friendlyName: \"General Chat\"\n        }).then(() => this.joinGeneralChannel(chatClient)).catch(() => reject(Error(\"Could not create general channel.\")));\n      });\n    };\n\n    this.configureChannelEvents = channel => {\n      channel.on(\"messageAdded\", ({\n        author,\n        body\n      }) => {\n        this.addMessage({\n          author,\n          body\n        });\n      });\n      channel.on(\"memberJoined\", member => {\n        this.addMessage({\n          body: \"\".concat(member.identity, \" has joined the channel.\")\n        });\n      });\n      channel.on(\"memberLeft\", member => {\n        this.addMessage({\n          body: \"\".concat(member.identity, \" has left the channel.\")\n        });\n      });\n    };\n\n    this.state = {\n      messages: [],\n      username: null,\n      channel: null\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(MessageForm, {\n      onMessageSend: this.handleNewMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/techhire/Desktop/apps/pitch-app/src/components/Chat/Chat.js"],"names":["React","Component","MessageForm","MessageList","TwilioChat","$","Chat","constructor","props","handleNewMessage","text","state","channel","sendMessage","getToken","Promise","resolve","reject","setState","messages","body","getJSON","token","username","identity","fail","Error","addMessage","message","messageData","me","author","componentDidMount","then","createChatClient","joinGeneralChannel","configureChannelEvents","catch","error","jwt","chatClient","getSubscribedChannels","getChannelByUniqueName","join","window","addEventListener","leave","createGeneralChannel","createChannel","uniqueName","friendlyName","on","member","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport MessageForm from \"./MessageForm\";\nimport MessageList from \"./MessageList\";\nimport TwilioChat from \"twilio-chat\";\nimport $ from \"jquery\";\nimport \"./Chat.css\";\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      username: null,\n      channel: null\n    };\n  }\n\n  handleNewMessage = text => {\n    if (this.state.channel) {\n      this.state.channel.sendMessage(text);\n    }\n  };\n  getToken = () => {\n    return new Promise((resolve, reject) => {\n      this.setState({\n        messages: [...this.state.messages, { body: `Connecting...` }]\n      });\n\n      $.getJSON(\"/token\", token => {\n        this.setState({ username: token.identity });\n        resolve(token);\n      }).fail(() => {\n        reject(Error(\"Failed to connect.\"));\n      });\n    });\n  };\n\n  addMessage = message => {\n    const messageData = {\n      ...message,\n      me: message.author === this.state.username\n    };\n    this.setState({\n      messages: [...this.state.messages, messageData]\n    });\n  };\n\n  componentDidMount = () => {\n    this.getToken()\n      .then(this.createChatClient)\n      .then(this.joinGeneralChannel)\n      .then(this.configureChannelEvents)\n      .catch(error => {\n        this.setState({\n          messages: this.addMessage({ body: \"...\" })\n        });\n      });\n  };\n  createChatClient = token => {\n    return new Promise((resolve, reject) => {\n      resolve(new TwilioChat(token.jwt));\n    });\n  };\n  joinGeneralChannel = chatClient => {\n    return new Promise((resolve, reject) => {\n      chatClient\n        .getSubscribedChannels()\n        .then(() => {\n          chatClient\n            .getChannelByUniqueName(\"general\")\n            .then(channel => {\n              this.addMessage({ body: \"Joining general channel...\" });\n              this.setState({ channel });\n\n              channel\n                .join()\n                .then(() => {\n                  this.addMessage({\n                    body: `Joined general channel as ${this.state.username}`\n                  });\n                  window.addEventListener(\"beforeunload\", () =>\n                    channel.leave()\n                  );\n                })\n                .catch(() => reject(Error(\"Could not join general channel.\")));\n\n              resolve(channel);\n            })\n            .catch(() => this.createGeneralChannel(chatClient));\n        })\n        .catch(() => reject(Error(\"Could not get channel list.\")));\n    });\n  };\n  createGeneralChannel = chatClient => {\n    return new Promise((resolve, reject) => {\n      this.addMessage({ body: \"Creating general channel...\" });\n      chatClient\n        .createChannel({ uniqueName: \"general\", friendlyName: \"General Chat\" })\n        .then(() => this.joinGeneralChannel(chatClient))\n        .catch(() => reject(Error(\"Could not create general channel.\")));\n    });\n  };\n\n  configureChannelEvents = channel => {\n    channel.on(\"messageAdded\", ({ author, body }) => {\n      this.addMessage({ author, body });\n    });\n\n    channel.on(\"memberJoined\", member => {\n      this.addMessage({ body: `${member.identity} has joined the channel.` });\n    });\n\n    channel.on(\"memberLeft\", member => {\n      this.addMessage({ body: `${member.identity} has left the channel.` });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Chat\">\n        <MessageList messages={this.state.messages} />\n        <MessageForm onMessageSend={this.handleNewMessage} />\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}