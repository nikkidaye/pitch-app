{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst operation_retrier_1 = require(\"operation-retrier\");\n\nconst logger_1 = require(\"./logger\");\n\nconst connector_1 = require(\"./connector\");\n\nexports.Connector = connector_1.Connector;\nlet retrierConfig = {\n  min: 2000,\n  max: 120000,\n  randomness: 0.2\n};\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically\n */\n\nclass RegistrarConnector extends connector_1.Connector {\n  /**\n   * Creates new instance of the ERS registrar\n   *\n   * @param Object configuration\n   * @param string notificationId\n   * @param string channelType\n   * @param Array messageTypes\n   */\n  constructor(channelType, context, transport, config) {\n    super(config);\n    this.channelType = channelType;\n    this.context = context;\n    this.transport = transport;\n  }\n\n  async updateRegistration(registration, reasons) {\n    if (reasons.has('notificationId')) {\n      await this.removeRegistration();\n    }\n\n    if (!registration.notificationId || !registration.notificationId.length) {\n      return registration;\n    }\n\n    await this.register(registration);\n    return registration;\n  }\n\n  async removeRegistration() {\n    if (!this.registrationId) {\n      return;\n    }\n\n    const url = \"\".concat(this.config.registrarUrl, \"/\").concat(this.registrationId, \"?productId=\").concat(this.context.productId);\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.config.token\n    };\n\n    try {\n      logger_1.log.trace('Removing registration for ', this.channelType);\n      await new operation_retrier_1.Retrier(Object.assign(retrierConfig, {\n        maxAttemptsCount: 3\n      })).run(() => this.transport.delete(url, headers));\n      logger_1.log.debug('Registration removed for', this.channelType);\n    } catch (err) {\n      logger_1.log.error('Failed to remove of registration ', this.channelType, err);\n      throw err;\n    }\n  }\n\n  async register(registration) {\n    logger_1.log.trace('Registering', this.channelType, registration);\n    let registrarRequest = {\n      endpoint_platform: this.context.platform,\n      channel_type: this.channelType,\n      version: this.context.protocolVersion.toString(),\n      message_types: Array.from(registration.messageTypes),\n      data: {\n        registration_id: registration.notificationId\n      },\n      ttl: 'PT24H'\n    };\n    const url = \"\".concat(this.config.registrarUrl, \"?productId=\").concat(this.context.productId);\n    const headers = {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': registration.token\n    };\n    logger_1.log.trace('Creating registration for channel ', this.channelType);\n\n    try {\n      let response = await new operation_retrier_1.Retrier(retrierConfig).run(() => this.transport.post(url, headers, registrarRequest));\n      this.registrationId = response.body.id;\n      logger_1.log.debug('Registration created: ', response);\n    } catch (err) {\n      logger_1.log.error('Registration failed: ', err);\n      throw err;\n    }\n  }\n\n}\n\nexports.RegistrarConnector = RegistrarConnector;","map":null,"metadata":{},"sourceType":"script"}