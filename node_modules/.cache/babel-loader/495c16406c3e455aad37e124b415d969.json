{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst registrar_connector_1 = require(\"./registrar.connector\");\n\nconst twilsock_connector_1 = require(\"./twilsock.connector\");\n/**\n * Provides an interface to the ERS registrar\n */\n\n\nclass Registrar extends events_1.EventEmitter {\n  /**\n   * Creates the new instance of registrar client\n   */\n  constructor(productId, transport, twilsock, config) {\n    super();\n    this.config = config;\n    this.connectors = new Map();\n    const platform = this.detectPlatform();\n    this.connectors.set('gcm', new registrar_connector_1.RegistrarConnector('gcm', {\n      protocolVersion: 3,\n      productId,\n      platform\n    }, transport, config));\n    this.connectors.set('fcm', new registrar_connector_1.RegistrarConnector('fcm', {\n      protocolVersion: 3,\n      productId,\n      platform\n    }, transport, config));\n    this.connectors.set('apn', new registrar_connector_1.RegistrarConnector('apn', {\n      protocolVersion: 4,\n      productId,\n      platform\n    }, transport, config));\n    this.connectors.set('twilsock', new twilsock_connector_1.TwilsockConnector({\n      productId,\n      platform\n    }, twilsock, config));\n    this.connectors.get('twilsock').on('transportReady', state => this.emit('transportReady', state));\n  }\n  /**\n   *  Sets notification ID.\n   *  If new URI is different from previous, it triggers updating of registration for given channel\n   *\n   *  @param {string} channelType channel type (apn|gcm|fcm|twilsock)\n   *  @param {string} notificationId The notification ID\n   */\n\n\n  setNotificationId(channelType, notificationId) {\n    this.connector(channelType).setNotificationId(notificationId);\n  }\n  /**\n   * Subscribe for given type of message\n   *\n   * @param {String} messageType Message type identifier\n   * @param {String} channelType Channel type, can be 'twilsock', 'gcm' or 'fcm'\n   * @public\n   */\n\n\n  subscribe(messageType, channelType) {\n    return this.connector(channelType).subscribe(messageType);\n  }\n  /**\n   * Remove subscription\n   * @param {String} messageType Message type\n   * @param {String} channelType Channel type (twilsock or gcm/fcm)\n   */\n\n\n  unsubscribe(messageType, channelType) {\n    return this.connector(channelType).unsubscribe(messageType);\n  }\n\n  updateToken(token) {\n    this.connectors.forEach(connector => connector.updateToken(token));\n  }\n  /**\n   * @param {String} type Channel type\n   * @throws {Error} Error with description\n   */\n\n\n  connector(type) {\n    let connector = this.connectors.get(type);\n\n    if (!connector) {\n      throw new Error(\"Unknown channel type: \".concat(type));\n    }\n\n    return connector;\n  }\n  /**\n   * Returns platform string limited to max 128 chars\n   */\n\n\n  detectPlatform() {\n    let platform = '';\n\n    if (typeof navigator !== 'undefined') {\n      platform = 'unknown';\n\n      if (typeof navigator.product !== 'undefined') {\n        platform = navigator.product;\n      }\n\n      if (typeof navigator.userAgent !== 'undefined') {\n        platform = navigator.userAgent;\n      }\n    } else {\n      platform = 'web';\n    }\n\n    return platform.substring(0, 128);\n  }\n\n}\n\nexports.Registrar = Registrar;","map":null,"metadata":{},"sourceType":"script"}