{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @class Paginator\n * @classdesc Pagination helper class.\n *\n * @property {Array} items Array of elements on current page.\n * @property {Boolean} hasNextPage Indicates the existence of next page.\n * @property {Boolean} hasPrevPage Indicates the existence of previous page.\n */\n\nclass Paginator {\n  /*\n  * @constructor\n  * @param {Array} items Array of element for current page.\n  * @param {Object} params\n  * @private\n  */\n  constructor(items, source, prevToken, nextToken) {\n    this.prevToken = prevToken;\n    this.nextToken = nextToken;\n    this.items = items;\n    this.source = source;\n  }\n\n  get hasNextPage() {\n    return !!this.nextToken;\n  }\n\n  get hasPrevPage() {\n    return !!this.prevToken;\n  }\n  /**\n   * Request next page.\n   * Does not modify existing object.\n   * @return {Promise<Paginator>}\n   */\n\n\n  async nextPage() {\n    if (!this.hasNextPage) {\n      throw new Error('No next page');\n    }\n\n    return this.source(this.nextToken);\n  }\n  /**\n   * Request previous page.\n   * Does not modify existing object.\n   * @return {Promise<Paginator>}\n   */\n\n\n  async prevPage() {\n    if (!this.hasPrevPage) {\n      throw new Error('No previous page');\n    }\n\n    return this.source(this.prevToken);\n  }\n\n}\n\nexports.Paginator = Paginator;","map":null,"metadata":{},"sourceType":"script"}