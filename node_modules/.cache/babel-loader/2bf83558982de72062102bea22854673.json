{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst uuid = require(\"uuid\");\n\nconst connector_1 = require(\"./connector\");\n\nconst DEFAULT_TTL = 60 * 60 * 48;\n/**\n * Registrar connector implementation for twilsock\n */\n\nclass TwilsockConnector extends connector_1.Connector {\n  constructor(context, twilsock, config) {\n    super(config);\n    this.twilsock = twilsock;\n    this.context = context;\n    context.id = uuid.v4();\n    this.twilsock.on('stateChanged', state => {\n      if (state !== 'connected') {\n        this.emit('transportReady', false);\n      }\n    });\n    this.twilsock.on('registered', id => {\n      if (context && id === context.id && twilsock.state === 'connected') {\n        this.emit('transportReady', true);\n      }\n    });\n  }\n\n  setNotificationId(...args) {}\n\n  updateToken(token) {// no need to do anything here, twilsock backend handles it on it's own\n    // so just ignoring here\n  }\n\n  async updateContextRequest(messageTypes) {\n    let context = {\n      product_id: this.context.productId,\n      notification_protocol_version: 4,\n      endpoint_platform: this.context.platform,\n      message_types: messageTypes\n    };\n    this.emit('transportReady', false);\n    await this.twilsock.setNotificationsContext(this.context.id, context);\n  }\n\n  async updateRegistration(registration, reasons) {\n    if (!reasons.has('messageType')) {\n      return;\n    }\n\n    await this.updateContextRequest(Array.from(registration.messageTypes));\n    return registration;\n  }\n\n  removeRegistration() {\n    return this.twilsock.removeNotificationsContext(this.context.id);\n  }\n\n}\n\nexports.TwilsockConnector = TwilsockConnector;","map":null,"metadata":{},"sourceType":"script"}