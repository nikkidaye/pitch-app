{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst operation_retrier_1 = require(\"operation-retrier\");\n\nconst logger_1 = require(\"../logger\");\n\nconst configuration_1 = require(\"../configuration\");\n\nconst FormData = require(\"isomorphic-form-data\");\n\nconst log = logger_1.Logger.scope('Network');\n\nclass Network {\n  constructor(config, transport) {\n    this.config = config;\n    this.transport = transport;\n  }\n\n  backoffConfig() {\n    return Object.assign(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);\n  }\n\n  retryWhenThrottled() {\n    if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {\n      return this.config.retryWhenThrottledOverride;\n    }\n\n    if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {\n      return configuration_1.Configuration.retryWhenThrottledDefault;\n    }\n\n    return false;\n  }\n\n  executeWithRetry(request, retryWhenThrottled = false) {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new operation_retrier_1.Retrier(this.backoffConfig());\n      retrier.on('attempt', () => {\n        request().then(result => retrier.succeeded(result)).catch(err => {\n          if (codesToRetryOn.indexOf(err.status) > -1) {\n            retrier.failed(err);\n          } else if (err.message === 'Twilsock disconnected') {\n            // Ugly hack. We must make a proper exceptions for twilsock\n            retrier.failed(err);\n          } else {\n            // Fatal error\n            retrier.removeAllListeners();\n            retrier.cancel();\n            reject(err);\n          }\n        });\n      });\n      retrier.on('succeeded', result => {\n        resolve(result);\n      });\n      retrier.on('cancelled', err => reject(err));\n      retrier.on('failed', err => reject(err));\n      retrier.start();\n    });\n  }\n\n  get(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const headers = {\n        'X-Twilio-Token': this.config.token\n      };\n      log.trace('sending GET request to ', url, ' headers ', headers);\n      let response = yield this.executeWithRetry(() => this.transport.get(url, headers), this.retryWhenThrottled());\n      log.trace('response', response);\n      return response;\n    });\n  }\n\n  post(url, media, contentType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let headers = {\n        'X-Twilio-Token': this.config.token\n      };\n\n      if (!(media instanceof FormData) && contentType) {\n        Object.assign(headers, {\n          'Content-Type': contentType\n        });\n      }\n\n      let response;\n      log.trace('sending POST request to ', url, ' headers ', headers);\n\n      try {\n        response = yield this.transport.post(url, headers, media);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          log.trace('got error in post response', err);\n          throw new TypeError('Posting FormData supported only with browser engine\\'s FormData');\n        } else {\n          throw err;\n        }\n      }\n\n      log.trace('response', response);\n      return response;\n    });\n  }\n\n}\n\nexports.Network = Network;","map":null,"metadata":{},"sourceType":"script"}