{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/Cece/pitch-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst logger_1 = require(\"./logger\");\n\nclass RegistrationState {\n  constructor(token = '', notificationId = '', messageTypes = new Set()) {\n    this.token = token;\n    this.notificationId = notificationId;\n    this.messageTypes = messageTypes;\n  }\n\n  clone() {\n    return new RegistrationState(this.token, this.notificationId, new Set(this.messageTypes));\n  }\n\n}\n\nexports.RegistrationState = RegistrationState;\n\nfunction setDifference(a, b) {\n  return [...[...a].filter(x => !b.has(x)), ...[...b].filter(x => !a.has(x))];\n}\n\nfunction hasDifference(a, b) {\n  let reasons = new Set();\n\n  if (a.notificationId !== b.notificationId) {\n    reasons.add('notificationId');\n  }\n\n  if (a.token !== b.token) {\n    reasons.add('token');\n  }\n\n  if (setDifference(a.messageTypes, b.messageTypes).length > 0) {\n    reasons.add('messageType');\n  }\n\n  return [reasons.size > 0, reasons];\n}\n\nclass Connector extends events_1.EventEmitter {\n  constructor(config) {\n    super();\n    this.config = config;\n    this.desiredState = new RegistrationState();\n    this.currentState = new RegistrationState();\n    this.hasActiveAttempt = false;\n  }\n\n  async subscribe(messageType) {\n    if (this.desiredState.messageTypes.has(messageType)) {\n      logger_1.log.debug('message type already registered ', messageType);\n      return;\n    }\n\n    this.desiredState.messageTypes.add(messageType);\n    this.persistRegistration();\n  }\n\n  async unsubscribe(messageType) {\n    if (!this.desiredState.messageTypes.has(messageType)) {\n      return;\n    }\n\n    this.desiredState.messageTypes.delete(messageType);\n    this.persistRegistration();\n  }\n\n  updateToken(token) {\n    this.desiredState.token = token;\n    this.persistRegistration();\n  }\n\n  async persistRegistration() {\n    if (!this.config.token || this.config.token.length === 0) {\n      logger_1.log.trace('Can\\'t persist registration: token is not set');\n      return;\n    }\n\n    if (this.hasActiveAttempt) {\n      logger_1.log.trace('One registration attempt is already in progress');\n      return;\n    }\n\n    let _hasDifference = hasDifference(this.desiredState, this.currentState),\n        _hasDifference2 = _slicedToArray(_hasDifference, 2),\n        needToUpdate = _hasDifference2[0],\n        reasons = _hasDifference2[1];\n\n    if (!needToUpdate) {\n      return;\n    }\n\n    if (!this.currentState.notificationId) {\n      reasons.delete('notificationId');\n    }\n\n    logger_1.log.trace('Persisting registration', reasons, this.desiredState);\n\n    try {\n      this.hasActiveAttempt = true;\n      let stateToPersist = this.desiredState.clone();\n\n      if (stateToPersist.messageTypes.size > 0) {\n        let persistedState = await this.updateRegistration(stateToPersist, reasons);\n        this.currentState.token = persistedState.token;\n        this.currentState.notificationId = persistedState.notificationId;\n        this.currentState.messageTypes = persistedState.messageTypes;\n        this.emit('stateChanged', 'registered');\n      } else {\n        await this.removeRegistration();\n        this.currentState.token = stateToPersist.token;\n        this.currentState.notificationId = stateToPersist.notificationId;\n        this.currentState.messageTypes.clear();\n        this.emit('stateChanged', 'unregistered');\n      }\n    } finally {\n      this.hasActiveAttempt = false;\n      setTimeout(() => this.persistRegistration(), 0);\n    }\n  }\n\n  setNotificationId(notificationId) {\n    this.desiredState.notificationId = notificationId;\n    this.persistRegistration();\n  }\n\n}\n\nexports.Connector = Connector;","map":null,"metadata":{},"sourceType":"script"}