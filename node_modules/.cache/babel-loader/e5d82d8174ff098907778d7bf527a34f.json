{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nfunction isDef(value) {\n  return value !== undefined && value !== null;\n}\n\nclass Backoff extends events_1.EventEmitter {\n  constructor(options) {\n    super();\n    options = options || {};\n\n    if (isDef(options.initialDelay) && options.initialDelay < 1) {\n      throw new Error('The initial timeout must be equal to or greater than 1.');\n    } else if (isDef(options.maxDelay) && options.maxDelay <= 1) {\n      throw new Error('The maximal timeout must be greater than 1.');\n    } else if (isDef(options.randomisationFactor) && (options.randomisationFactor < 0 || options.randomisationFactor > 1)) {\n      throw new Error('The randomisation factor must be between 0 and 1.');\n    } else if (isDef(options.factor) && options.factor <= 1) {\n      throw new Error(\"Exponential factor should be greater than 1.\");\n    }\n\n    this.initialDelay = options.initialDelay || 100;\n    this.maxDelay = options.maxDelay || 10000;\n\n    if (this.maxDelay <= this.initialDelay) {\n      throw new Error('The maximal backoff delay must be greater than the initial backoff delay.');\n    }\n\n    this.randomisationFactor = options.randomisationFactor || 0;\n    this.factor = options.factor || 2;\n    this.maxNumberOfRetry = -1;\n    this.reset();\n  }\n\n  static exponential(options) {\n    return new Backoff(options);\n  }\n\n  backoff(err) {\n    if (this.timeoutID == null) {\n      if (this.backoffNumber === this.maxNumberOfRetry) {\n        this.emit('fail', err);\n        this.reset();\n      } else {\n        this.backoffDelay = this.next();\n        this.timeoutID = setTimeout(this.onBackoff.bind(this), this.backoffDelay);\n        this.emit('backoff', this.backoffNumber, this.backoffDelay, err);\n      }\n    }\n  }\n\n  reset() {\n    this.backoffDelay = 0;\n    this.nextBackoffDelay = this.initialDelay;\n    this.backoffNumber = 0;\n    clearTimeout(this.timeoutID);\n    this.timeoutID = null;\n  }\n\n  failAfter(maxNumberOfRetry) {\n    if (maxNumberOfRetry <= 0) {\n      throw new Error(\"Expected a maximum number of retry greater than 0 but got \".concat(maxNumberOfRetry));\n    }\n\n    this.maxNumberOfRetry = maxNumberOfRetry;\n  }\n\n  next() {\n    this.backoffDelay = Math.min(this.nextBackoffDelay, this.maxDelay);\n    this.nextBackoffDelay = this.backoffDelay * this.factor;\n    let randomisationMultiple = 1 + Math.random() * this.randomisationFactor;\n    return Math.min(this.maxDelay, Math.round(this.backoffDelay * randomisationMultiple));\n  }\n\n  onBackoff() {\n    this.timeoutID = null;\n    this.emit('ready', this.backoffNumber, this.backoffDelay);\n    this.backoffNumber++;\n  }\n\n}\n\nexports.Backoff = Backoff;\nexports.default = Backoff;","map":null,"metadata":{},"sourceType":"script"}